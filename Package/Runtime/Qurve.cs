namespace Vheos.Tools.UnityCore
{
    using UnityEngine;
    using Tools.Extensions.Math;
    using Tools.Extensions.UnityObjects;

    static public class Qurve
    {
        // CONST
        private const float PRECISION = 0.01f;
        private const float DEFAULT_HALFTIME = 0.2f;

        // Publics
        static public float ValueAt(float progress)
        => ValuesByProgress.Evaluate(progress);
        static public float ValueAt(float progress, float halfTime)
        {
            if (progress <= 0f || halfTime < 0f + PRECISION)
                return 0f;
            else if (progress >= 1f || halfTime > 1f - PRECISION)
                return 1f;
            else if (halfTime == 0.5f)
                return progress;

            float a = _paramsByHalfTime.Evaluate(halfTime);
            return (1 - a.Pow(progress)) / (1 - a);
        }
        static public AnimationCurve ValuesByProgress
        { get; private set; }

        // Privates
        static private AnimationCurve _paramsByHalfTime;

        // Initializers
        [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
        static private void StaticInitialize()
        {
            _paramsByHalfTime = new AnimationCurve();
            _paramsByHalfTime.AddLinearKeys
            (
            #region Cached values
                (0.01f, 7.8886090522100655e-031f),
                (0.02f, 8.8817841970016606e-016f),
                (0.03f, 9.2398902451231934e-011f),
                (0.04f, 2.9802344592180323e-008f),
                (0.05f, 9.5369250681204667e-007f),
                (0.06f, 9.6139751123510783e-006f),
                (0.07f, 5.0105147555267608e-005f),
                (0.08f, 1.7300719857581308e-004f),
                (0.09f, 4.5437492446458638e-004f),
                (0.10f, 9.8623657310451386e-004f),
                (0.11f, 1.8651801878240958e-003f),
                (0.12f, 3.1836130846925681e-003f),
                (0.13f, 5.0249241641102046e-003f),
                (0.14f, 7.4618631928185398e-003f),
                (0.15f, 1.0556954855022447e-002f),
                (0.16f, 1.4363947501072458e-002f),
                (0.17f, 1.8929639942994330e-002f),
                (0.18f, 2.4295721100485088e-002f),
                (0.19f, 3.0500451394104788e-002f),
                (0.20f, 3.7580127351768439e-002f),
                (0.21f, 4.5570329194874581e-002f),
                (0.22f, 5.4506977497265172e-002f),
                (0.23f, 6.4427234115900886e-002f),
                (0.24f, 7.5370283235442120e-002f),
                (0.25f, 8.7378025384152749e-002f),
                (0.26f, 1.0049571316872663e-001f),
                (0.27f, 1.1477255344374006e-001f),
                (0.28f, 1.3026229719221025e-001f),
                (0.29f, 1.4702383571767144e-001f),
                (0.30f, 1.6512181984715066e-001f),
                (0.31f, 1.8462731766825627e-001f),
                (0.32f, 2.0561852580832882e-001f),
                (0.33f, 2.2818154935423340e-001f),
                (0.34f, 2.5241126617204651e-001f),
                (0.35f, 2.7841229260396883e-001f),
                (0.36f, 3.0630006930759252e-001f),
                (0.37f, 3.3620208839883936e-001f),
                (0.38f, 3.6825928613117476e-001f),
                (0.39f, 4.0262762918803457e-001f),
                (0.40f, 4.3947992741640496e-001f),
                (0.41f, 4.7900791166341650e-001f),
                (0.42f, 5.2142462252260979e-001f),
                (0.43f, 5.6696716454470864e-001f),
                (0.44f, 6.1589989119320077e-001f),
                (0.45f, 6.6851809900564207e-001f),
                (0.46f, 7.2515232566929078e-001f),
                (0.47f, 7.8617336682034233e-001f),
                (0.48f, 8.5199815134322598e-001f),
                (0.49f, 9.2309664609305264e-001f),
                (0.50f, 1f),
                (0.51f, 1.0833101866770187e+000f),
                (0.52f, 1.1737114668892663e+000f),
                (0.53f, 1.2719840714580228e+000f),
                (0.54f, 1.3790206065698460e+000f),
                (0.55f, 1.4958458140286806e+000f),
                (0.56f, 1.6236404881687370e+000f),
                (0.57f, 1.7637705717985073e+000f),
                (0.58f, 1.9178227433182586e+000f),
                (0.59f, 2.0876481904596740e+000f),
                (0.60f, 2.2754167770044811e+000f),
                (0.61f, 2.4836844953155994e+000f),
                (0.62f, 2.7154780277388526e+000f),
                (0.63f, 2.9744015117886238e+000f),
                (0.64f, 3.2647723595379947e+000f),
                (0.65f, 3.5917954291711696e+000f),
                (0.66f, 3.9617882956079651e+000f),
                (0.67f, 4.3824752826425133e+000f),
                (0.68f, 4.8633750099549369e+000f),
                (0.69f, 5.4163165702099842e+000f),
                (0.70f, 6.0561348035388347e+000f),
                (0.71f, 6.8016182214174501e+000f),
                (0.72f, 7.6768184006799638e+000f),
                (0.73f, 8.7128844832243448e+000f),
                (0.74f, 9.9506732025579865e+000f),
                (0.75f, 1.1444525046240804e+001f),
                (0.76f, 1.3267828606616696e+001f),
                (0.77f, 1.5521386471457982e+001f),
                (0.78f, 1.8346275025984944e+001f),
                (0.79f, 2.1944103052748478e+001f),
                (0.80f, 2.6609808706593959e+001f),
                (0.81f, 3.2786400013518637e+001f),
                (0.82f, 4.1159511004595473e+001f),
                (0.83f, 5.2827206593017451e+001f),
                (0.84f, 6.9618745120401996e+001f),
                (0.85f, 9.4724284960283924e+001f),
                (0.86f, 1.3401478614113734e+002f),
                (0.87f, 1.9900797849694087e+002f),
                (0.88f, 3.1410852179499886e+002f),
                (0.89f, 5.3614122996158915e+002f),
                (0.90f, 1.0139555024330168e+003f),
                (0.91f, 2.2008256753568703e+003f),
                (0.92f, 5.7801063090551197e+003f),
                (0.93f, 1.9958029240348544e+004f),
                (0.94f, 1.0401524741990549e+005f),
                (0.95f, 1.0485559998187765e+006f),
                (0.96f, 3.3554406999989089e+007f),
                (0.97f, 1.0822639376347584e+010f),
                (0.98f, 1.1258999068423403e+015f),
                (0.99f, 1.2676506002279099e+030f)
            #endregion
            );

            ValuesByProgress = new AnimationCurve();
            for (int i = 0; i <= PRECISION.Inv().RoundUp(); i++)
            {
                float progress = i * PRECISION;
                ValuesByProgress.AddKey(progress, ValueAt(progress, DEFAULT_HALFTIME));
            }
        }
    }
}